using System;
using System.Data;using Business_Logic.Enums;using Business_Logic.Interfaces;
using Business_Logic.Models.MusicUnits;using Microsoft.Data.SqlClient;namespace Data_Access_Layer.Repositories
{
	public class MusicUnitRepository : BaseRepository, IMusicUnitRepository
	{        public void Delete(string id)        {            var sql = "DELETE FROM MusicUnit WHERE id = @Id";            ExecuteNonQuery(sql, command => {                command.Parameters.Add(new SqlParameter("@Id", SqlDbType.NVarChar) { Value = id });            });        }        public List<MusicUnit> GetAll()        {            string sql = "SELECT * FROM MusicUnit";            return ExecuteQuery(sql, MapMusicUnit);        }        public MusicUnit? GetById(string id)        {            string sql = "SELECT * FROM MusicUnit WHERE id = @Id";            List<MusicUnit> result = ExecuteQuery(sql, MapMusicUnit, command => {                command.Parameters.Add(new SqlParameter("@Id", SqlDbType.NVarChar) { Value = id });            });            return result.FirstOrDefault();        }        public List<MusicUnit> GetHighestRatedUnits(int unitCount)        {            string sql = "SELECT TOP(@unitCount) * FROM MusicUnit ORDER BY avgRating DESC";            List<MusicUnit> result = ExecuteQuery(sql, MapMusicUnit, command =>            {                command.Parameters.Add(new SqlParameter("@unitCount", SqlDbType.Int) { Value = unitCount });            });            return result;        }        public List<MusicUnit> GetMusicUnitsByKeywordInNameOrderedByHighestRated(string keyword)        {            string sql = "SELECT * FROM MusicUnit WHERE name LIKE @Keyword ORDER BY avgRating DESC";            List<MusicUnit> result = ExecuteQuery(sql, MapMusicUnit, command => {                command.Parameters.Add(new SqlParameter("@Keyword", SqlDbType.NVarChar) { Value = "%" + keyword + "%" });            });            return result;        }        public void Insert(MusicUnit entity)        {            var sql = @"INSERT INTO MusicUnit (id, name, image, avgRating, type) 
                VALUES (@Id, @Name, @Image, @AvgRating, @Type)";            ExecuteNonQuery(sql, command =>            {                command.Parameters.Add(new SqlParameter("@Id", SqlDbType.NVarChar) { Value = entity.Id });                command.Parameters.Add(new SqlParameter("@Name", SqlDbType.NVarChar) { Value = entity.Name });                command.Parameters.Add(new SqlParameter("@Image", SqlDbType.NVarChar) { Value = entity.Image });                command.Parameters.Add(new SqlParameter("@AvgRating", SqlDbType.Float) { Value = entity.AvrgRating });                command.Parameters.Add(new SqlParameter("@Type", SqlDbType.NVarChar) { Value = entity.Type.ToString() });            });        }        public void Update(MusicUnit entity)        {            var sql = "UPDATE MusicUnit SET name = @Name, image = @Image, avgRating = @AvgRating, type = @Type WHERE id = @Id";            ExecuteNonQuery(sql, command => {                command.Parameters.Add(new SqlParameter("@Name", SqlDbType.NVarChar) { Value = entity.Name });                command.Parameters.Add(new SqlParameter("@Image", SqlDbType.NVarChar) { Value = entity.Image });                command.Parameters.Add(new SqlParameter("@AvgRating", SqlDbType.Float) { Value = entity.AvrgRating });                command.Parameters.Add(new SqlParameter("@Type", SqlDbType.NVarChar) { Value = entity.Type.ToString() });                command.Parameters.Add(new SqlParameter("@Id", SqlDbType.NVarChar) { Value = entity.Id });            });        }        private MusicUnit MapMusicUnit(IDataReader reader)        {            return new MusicUnit()
            {
                Id = reader.GetString(reader.GetOrdinal("id")),
                Name = reader.GetString(reader.GetOrdinal("name")),
                Image = reader.GetString(reader.GetOrdinal("image")),                AvrgRating = reader.GetFloat(reader.GetOrdinal("avgRating")),                Type = (MUSIC_UNIT_TYPE)Enum.Parse(typeof(MUSIC_UNIT_TYPE), reader.GetString(reader.GetOrdinal("type")))            };        }    }
}

