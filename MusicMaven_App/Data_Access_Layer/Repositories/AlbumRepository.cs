using System;
using System.Data;using Business_Logic.Enums;using Business_Logic.Interfaces;
using Business_Logic.Models.MusicUnits;
using Microsoft.Data.SqlClient;namespace Data_Access_Layer.Repositories
{
	public class AlbumRepository : BaseRepository, IAlbumRepository
	{
        private IArtistRepository artistRepository;

        public AlbumRepository(IArtistRepository artistRepository)        {
            this.artistRepository = artistRepository;
        }
		        private Album MapAlbum(IDataReader reader)        {            // Map the Album properties            Album album = new Album();            album.Id = reader.GetString(reader.GetOrdinal("id"));            album.Name = reader.GetString(reader.GetOrdinal("name"));            album.Image = reader.GetString(reader.GetOrdinal("image"));            album.Type = (MUSIC_UNIT_TYPE)Enum.Parse(typeof(MUSIC_UNIT_TYPE), reader.GetString(reader.GetOrdinal("type")));            album.AvrgRating = reader.GetDouble(reader.GetOrdinal("avgRating"));            album.ReleaseDate = reader.GetDateTime(reader.GetOrdinal("releaseDate"));            album.Genre = (GENRE_TYPE)Enum.Parse(typeof(GENRE_TYPE), reader.GetString(reader.GetOrdinal("genre")));                        return album;        }                public Album? GetById(string id)        {            string sql = "SELECT mu.id, mu.name, mu.image, mu.type, mu.avgRating, al.releaseDate, al.genre " +
                 "FROM MusicUnit mu " +
                 "JOIN Album al ON mu.id = al.id " +
                 "WHERE mu.id = @id";            var album = ExecuteQuery(sql, MapAlbum, command =>            {                var parameter = command.CreateParameter();                parameter.ParameterName = "@id";                parameter.Value = id;                command.Parameters.Add(parameter);            }).FirstOrDefault();            if (album != null)            {                List<Artist> artists = artistRepository.GetArtistsForAlbumId(album.Id);                album.Artists = artists.AsReadOnly();            }            return album;        }        public List<Album> GetAlbumsForArtistId(string id)        {            string sql = "SELECT mu.id, mu.name, mu.image, mu.type, mu.avgRating, al.releaseDate, al.genre, ar.artistType " +
                 "FROM MusicUnit mu " +
                 "JOIN Album al ON mu.id = al.id " +
                 "JOIN AlbumArtists aa ON mu.id = aa.albumId " +
                 "JOIN Artist ar ON aa.artistId = ar.id " +
                 "WHERE ar.id = @id";            var albums = ExecuteQuery(sql, MapAlbum, command =>            {                var parameter = command.CreateParameter();                parameter.ParameterName = "@id";                parameter.Value = id;                command.Parameters.Add(parameter);            }).ToList();            // Retrieve the artists for each album            foreach (Album album in albums)            {                List<Artist> artists = artistRepository.GetArtistsForAlbumId(album.Id);                album.Artists = artists.AsReadOnly();            }            return albums;        }        public List<Album> GetNewReleasedAlbums(int albumCount)        {            // Build the SQL query to retrieve the latest albums            string sql = "SELECT TOP(@albumCount) mu.id, mu.name, mu.image, mu.type, mu.avgRating, al.releaseDate, al.genre " +                        "FROM MusicUnit mu " +                        "JOIN Album al ON mu.id = al.id " +                        "ORDER BY al.releaseDate DESC";            // Execute the query and map the results to Album objects            List<Album> albums = ExecuteQuery(sql, MapAlbum, command =>            {                var parameter = command.CreateParameter();                parameter.ParameterName = "@albumCount";                parameter.Value = albumCount;                command.Parameters.Add(parameter);            });            // Retrieve the associated artists for each album            foreach (Album album in albums)            {                List<Artist> artists = artistRepository.GetArtistsForAlbumId(album.Id);                album.Artists = artists.AsReadOnly();            }            return albums;        }        public List<Album> GetAlbumsWithKeywordInName(string keyword)        {            string sql = "SELECT mu.id, mu.name, mu.image, mu.type, mu.avgRating, al.releaseDate, al.genre " +
                 "FROM MusicUnit mu " +
                 "JOIN Album al ON mu.id = al.id " +
                 "WHERE mu.name LIKE '%' + @keyword + '%'";            List<Album> albums = ExecuteQuery(sql, MapAlbum, command =>            {                var parameter = command.CreateParameter();                parameter.ParameterName = "@keyword";                parameter.Value = keyword;                command.Parameters.Add(parameter);            }).ToList();            // Retrieve the artists for each album            foreach (Album album in albums)            {                List<Artist> artists = artistRepository.GetArtistsForAlbumId(album.Id);                // Assign the artists to the album                album.Artists = artists.AsReadOnly();            }            return albums;        }        public List<Album> GetAll()        {            string sql = "SELECT mu.id, mu.name, mu.image, mu.type, mu.avgRating, al.releaseDate, al.genre " +
                 "FROM MusicUnit mu " +
                 "JOIN Album al ON mu.id = al.id";            var albums = ExecuteQuery(sql, MapAlbum, null).ToList();            // Retrieve the artists for each album            foreach (Album album in albums)            {                List<Artist> artists = artistRepository.GetArtistsForAlbumId(album.Id);                album.Artists = artists.AsReadOnly();            }            return albums;        }        public void Insert(Album entity)        {            string insertAlbumSql = "INSERT INTO MusicUnit (id, name, image, type, avgRating) VALUES (@id, @name, @image, @type, @avgRating) INSERT INTO Album (id, releaseDate, genre) VALUES (@id, @releaseDate, @genre)";            ExecuteNonQuery(insertAlbumSql, command =>            {                command.Parameters.Add(new SqlParameter("@id", SqlDbType.NVarChar) { Value = entity.Id });                command.Parameters.Add(new SqlParameter("@name", SqlDbType.NVarChar) { Value = entity.Name });                command.Parameters.Add(new SqlParameter("@image", SqlDbType.NVarChar) { Value = entity.Image });                command.Parameters.Add(new SqlParameter("@avgRating", SqlDbType.Float) { Value = entity.AvrgRating });                command.Parameters.Add(new SqlParameter("@type", SqlDbType.NVarChar) { Value = entity.Type.ToString() });                command.Parameters.Add(new SqlParameter("@releaseDate", SqlDbType.DateTime) { Value = entity.ReleaseDate });                command.Parameters.Add(new SqlParameter("@genre", SqlDbType.NVarChar) { Value = entity.Genre.ToString() });
            });            // Insert artists into AlbumArtists table            foreach (Artist artist in entity.Artists)            {                string insertArtistSql = "INSERT INTO AlbumArtists (albumId, artistId) VALUES (@albumId, @artistId)";                ExecuteNonQuery(insertArtistSql, command =>                {                    command.Parameters.Add(new SqlParameter("@albumId", SqlDbType.NVarChar) { Value = entity.Id });                    command.Parameters.Add(new SqlParameter("@artistId", SqlDbType.NVarChar) { Value = artist.Id });                });            }        }        public void Update(Album entity)        {            // Update MusicUnit table            string updateAlbumSql = "UPDATE MusicUnit SET name = @name, image = @image, type = @type, avgRating = @avgRating WHERE id = @id";            ExecuteNonQuery(updateAlbumSql, command =>            {                command.Parameters.Add(new SqlParameter("@id", SqlDbType.NVarChar) { Value = entity.Id });                command.Parameters.Add(new SqlParameter("@name", SqlDbType.NVarChar) { Value = entity.Name });                command.Parameters.Add(new SqlParameter("@image", SqlDbType.NVarChar) { Value = entity.Image });                command.Parameters.Add(new SqlParameter("@avgRating", SqlDbType.Float) { Value = entity.AvrgRating });                command.Parameters.Add(new SqlParameter("@type", SqlDbType.NVarChar) { Value = entity.Type.ToString() });            });            // Update Album table            string updateAlbumDetailsSql = "UPDATE Album SET releaseDate = @releaseDate, genre = @genre WHERE id = @id";            ExecuteNonQuery(updateAlbumDetailsSql, command =>            {                command.Parameters.Add(new SqlParameter("@id", SqlDbType.NVarChar) { Value = entity.Id });                command.Parameters.Add(new SqlParameter("@releaseDate", SqlDbType.DateTime) { Value = entity.ReleaseDate });                command.Parameters.Add(new SqlParameter("@genre", SqlDbType.NVarChar) { Value = entity.Genre.ToString() });            });            // Update AlbumArtists table            // First, delete all existing artist references for this album            string deleteAlbumArtistsSql = "DELETE FROM AlbumArtists WHERE albumId = @albumId";            ExecuteNonQuery(deleteAlbumArtistsSql, command =>            {                command.Parameters.Add(new SqlParameter("@albumId", SqlDbType.NVarChar) { Value = entity.Id });            });            // Next, insert the updated artist references            foreach (Artist artist in entity.Artists)            {                string insertArtistSql = "INSERT INTO AlbumArtists (albumId, artistId) VALUES (@albumId, @artistId)";                ExecuteNonQuery(insertArtistSql, command =>                {                    command.Parameters.Add(new SqlParameter("@albumId", SqlDbType.NVarChar) { Value = entity.Id });                    command.Parameters.Add(new SqlParameter("@artistId", SqlDbType.NVarChar) { Value = artist.Id });                });            }        }        public void Delete(string id)        {            string deleteAlbumSql = "DELETE FROM Album WHERE id = @id";            ExecuteNonQuery(deleteAlbumSql, command =>            {                command.Parameters.Add(new SqlParameter("@id", SqlDbType.NVarChar) { Value = id });            });        }    }
}

