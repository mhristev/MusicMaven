using System;
using Business_Logic.Interfaces;using Business_Logic.Models;using Business_Logic.Models.MusicUnits;using Business_Logic.Services;namespace Business_Logic.Services
{    public class RecommendationService    {        public Dictionary<MusicUnit, Dictionary<User, double>> ratings;        private IUserRepository userRepository;        private IMusicUnitRepository musicUnitRepository;        private IReviewRepository reviewRepository;        public Dictionary<MusicUnit, Dictionary<User, double>> Ratings { private get => ratings;  set => ratings = value; }        public RecommendationService(IUserRepository userRepository, IMusicUnitRepository musicUnitRepository, IReviewRepository reviewRepository)        {            // Initialize the ratings dictionary with your existing data            ratings = new Dictionary<MusicUnit, Dictionary<User, double>>();            this.userRepository = userRepository;            this.musicUnitRepository = musicUnitRepository;            // Populate the ratings dictionary with actual ratings from your database            // This is just an example, you need to replace it with your own logic to fetch the ratings from the database            List<MusicUnit> musicUnits = musicUnitRepository.GetAll();            List<User> users = userRepository.GetAll();            foreach (var unit in musicUnits)            {                ratings[unit] = new Dictionary<User, double>();                foreach (var user in users)                {                    double rating = reviewRepository.GetRatingFor(user.Id, unit.Id);                    ratings[unit][user] = rating;                }            }        }        public List<MusicUnit> GetRecommendationsForUser(User user, int numRecommendations)        {            List<MusicUnit> unratedUnits = musicUnitRepository.GetUnratedUnits(user.Id);            Dictionary<MusicUnit, double> predictedRatings = new Dictionary<MusicUnit, double>();            foreach (var unratedUnit in unratedUnits)            {                double numerator = 0;                double denominator = 0;                foreach (var ratedUnit in ratings.Keys)                {                    if (ratedUnit == unratedUnit)                        continue;                    double similarity = CalculateSimilarity(ratedUnit, unratedUnit);                    if (ratings[ratedUnit].ContainsKey(user))                    {                        double rating = ratings[ratedUnit][user];                        numerator += similarity * rating;                        denominator += similarity;                    }                }                double predictedRating = denominator != 0 ? numerator / denominator : 0;                predictedRatings[unratedUnit] = predictedRating;            }            var a = predictedRatings;            List<MusicUnit> recommendations = predictedRatings.OrderByDescending(kv => kv.Value)                                                            .Select(kv => kv.Key)                                                            .Take(numRecommendations)                                                            .ToList();            return recommendations;        }        private double CalculateSimilarity(MusicUnit unit1, MusicUnit unit2)        {            Dictionary<User, double> ratingsUnit1 = ratings[unit1];            Dictionary<User, double> ratingsUnit2 = ratings[unit2];            double dotProduct = 0;            double normUnit1 = 0;            double normUnit2 = 0;            foreach (var user in ratingsUnit1.Keys.Concat(ratingsUnit2.Keys))            {                if (ratingsUnit1.TryGetValue(user, out double ratingUnit1) && ratingsUnit2.TryGetValue(user, out double ratingUnit2))                {                    dotProduct += ratingUnit1 * ratingUnit2;                    normUnit1 += ratingUnit1 * ratingUnit1;                    normUnit2 += ratingUnit2 * ratingUnit2;                }            }            if (normUnit1 == 0 || normUnit2 == 0)                return 0;            double similarity = dotProduct / (Math.Sqrt(normUnit1) * Math.Sqrt(normUnit2));            return similarity;        }
    }

}


//public static void Main()//{//    // Sample data//                        var musicUnits = new List<MusicUnit>
//        {
//            new MusicUnit { Id = "Artist1", Name = "Artist 1", AvgRating = 4.2 },
//            new MusicUnit { Id = "Artist2", Name = "Artist 2", AvgRating = 3.8 },
//            new MusicUnit { Id = "Album1", Name = "Album 1", AvgRating = 4.6 },
//            new MusicUnit { Id = "Song1", Name = "Song 1", AvgRating = 4.0 },
//            // Add more music units
//        };//    var users = new List<User>
//        {
//            new User { Id = "User1", Username = "User 1" },
//            new User { Id = "User2", Username = "User 2" },
//            // Add more users
//        };//    var reviews = new List<Review>
//        {
//            new Review { Id = "Review1", Rating = 5.0, MusicUnit = musicUnits[0], Creator = users[0] },
//            new Review { Id = "Review2", Rating = 4.5, MusicUnit = musicUnits[1], Creator = users[1] },
//            // Add more reviews
//        };//    // Create an instance of the item-based collaborative filtering class//                                                                                var itemBasedCF = new ItemBasedCollaborativeFiltering();//    // Build the item-item matrix based on reviews and music units//                                                                         itemBasedCF.BuildItemItemMatrix(musicUnits, reviews);//    // Get recommended music units for a user//                                                    string userId = "User1";//    int numItems = 5;//    var user = users.FirstOrDefault(u => u.Id == userId);//    var recommendedMusicUnits = itemBasedCF.GetRecommendedMusicUnits(user, numItems);//    // Print the recommended music units//                                               Console.WriteLine($"Recommended music units for {user.Username}:");//    foreach (var musicUnit in recommendedMusicUnits)//    {//        Console.WriteLine(musicUnit.Name);//    }//}
