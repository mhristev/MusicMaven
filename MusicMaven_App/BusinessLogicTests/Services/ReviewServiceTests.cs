using System;
using System.Collections.Generic;using Business_Logic.FakeRepositories;using Business_Logic.Models;using Business_Logic.Models.MusicUnits;using Business_Logic.Services;using Microsoft.VisualStudio.TestTools.UnitTesting;using Business_Logic.Models.Enums;using Business_Logic.Enums;using Business_Logic.Interfaces;using System.Linq;namespace BusinessLogicTests.Services
{
    [TestClass]
	public class ReviewServiceTests
	{        private ReviewService _reviewService;        private FakeReviewRepository _fakeReviewRepository;        private MusicUnit _musicUnit;        private User _creator;        [TestInitialize]        public void Setup()        {            var fakeUserRepository = new FakeUserRepository();            var fakeArtistRepository = new FakeArtistRepository();            _fakeReviewRepository = new FakeReviewRepository(fakeUserRepository, fakeArtistRepository);            var fakeCurrentUserProvider = new FakeCurrentUserProvider("1");            _reviewService = new ReviewService(_fakeReviewRepository, fakeCurrentUserProvider);        }        [TestMethod]        public void GetAllReturnsAllReviewsTest()        {            // Arrange            var expectedReviews = _fakeReviewRepository.GetAll();            // Act            var actualReviews = _reviewService.GetAll();            // Assert            CollectionAssert.AreEqual(expectedReviews, actualReviews);        }        [TestMethod]        public void AddReviewCreatesNewReviewTest()        {            // Arrange            var musicUnit = new MusicUnit("1", "Album", "image", 8.1, MUSIC_UNIT_TYPE.ALBUM);            var creator = new User("1", "JohnDoe", "john.doe@example.com", "password", new List<User>(), USER_TYPE.NORMAL);            var expectedTitle = "Amazing!";            var expectedDescription = "This album is fantastic!";            var extectedRating = 9.1;            // Act            _reviewService.AddReview(expectedTitle, expectedDescription, extectedRating, musicUnit, creator);            // Assert            Review? review = _fakeReviewRepository.GetAll().LastOrDefault();            Assert.IsNotNull(review);            Assert.AreEqual(expectedTitle, review.Title);            Assert.AreEqual(expectedDescription, review.Description);            Assert.AreEqual(extectedRating, review.Rating);            Assert.AreEqual(musicUnit, review.MusicUnit);            Assert.AreEqual(creator, review.Creator);        }        [TestMethod]        public void GetReviewsForMusicUnitTest()        {            // Arrange             var musicUnit = new MusicUnit(Guid.NewGuid().ToString(), "Album", "image", 8.1, MUSIC_UNIT_TYPE.ALBUM);            var musicUnit2 = new MusicUnit(Guid.NewGuid().ToString(), "Album2", "image2", 8.1, MUSIC_UNIT_TYPE.ALBUM);            var creator1 = new User(Guid.NewGuid().ToString(), "JohnDoe", "john.doe@example.com", "password", new List<User>(), USER_TYPE.NORMAL);            var creator2 = new User(Guid.NewGuid().ToString(), "JohnDoe2", "john.doe@example.com", "password", new List<User>(), USER_TYPE.NORMAL);            Review review1 = new Review(Guid.NewGuid().ToString(), "Title", "Description", DateTime.Today, 8.1, musicUnit, creator1, new List<User>());            Review review2 = new Review(Guid.NewGuid().ToString(), "Title 2", "Description 2", DateTime.Today, 4.5, musicUnit, creator2, new List<User>());            Review review3 = new Review(Guid.NewGuid().ToString(), "Title 3", "Description 3", DateTime.Today, 7.2, musicUnit2, creator2, new List<User>());            _fakeReviewRepository.Insert(review1);            _fakeReviewRepository.Insert(review2);            _fakeReviewRepository.Insert(review3);            // Act            List<Review> reviews = _reviewService.GetReviewsForMusicUnit(musicUnit);            // Assert            Assert.AreEqual(2, reviews.Count);            //Assert.AreEqual(review1, reviews[0]);            //Assert.AreEqual(review1, reviews[0]);            Assert.AreEqual(review1.Id, reviews[0].Id);            Assert.AreEqual(review1.Title, reviews[0].Title);            Assert.AreEqual(review1.Description, reviews[0].Description);            Assert.AreEqual(review1.Rating, reviews[0].Rating);            Assert.AreEqual(musicUnit.Id, reviews[0].MusicUnit.Id);            Assert.AreEqual(creator1.Id, reviews[0].Creator.Id);            Assert.AreEqual(0, reviews[0].LikedBy.Count);            Assert.AreEqual(review2.Id, reviews[1].Id);            Assert.AreEqual(review2.Title, reviews[1].Title);            Assert.AreEqual(review2.Description, reviews[1].Description);            Assert.AreEqual(review2.Rating, reviews[1].Rating);            Assert.AreEqual(musicUnit.Id, reviews[1].MusicUnit.Id);            Assert.AreEqual(creator2.Id, reviews[1].Creator.Id);            Assert.AreEqual(0, reviews[0].LikedBy.Count);        }    }
}

